source api_business
{
    type                = pgsql
    sql_host            = 127.0.0.1
    sql_user            = django
    sql_pass            = welcometoallsortz
    sql_db              = allsortz_db
    sql_port            = 5432

    sql_query_pre       =
    sql_query_post      =
    sql_query           = \
        select api_business.id, api_business.name, api_business.date, api_businesstype.bustype_id AS bustypes, api_type.descr, \
	radians(lat) as latit, radians(lon) as lonit \
	FROM api_business, api_businesstype, api_type WHERE api_business.id = api_businesstype.business_id  \
	AND api_businesstype.bustype_id = api_type.id;
    sql_query_info      = SELECT * FROM `api_business` WHERE `id` = $id


    # DateField's and DateTimeField's
    sql_attr_timestamp   = date
    sql_attr_float = latit
    sql_attr_float = lonit




}

index api_business
{
    source          = api_business
    path            = /var/data/api_business
    docinfo         = extern
    morphology      = none
    stopwords       =
    min_word_len    = 2
    charset_type    = utf-8
    min_prefix_len  = 0
    min_infix_len   = 0
}
source api_topic
{
    type                = pgsql
    sql_host            = 127.0.0.1
    sql_user            = django
    sql_pass            = welcometoallsortz
    sql_db              = allsortz_db
    sql_port            = 5432

    sql_query_pre       =
    sql_query_post      =
    sql_query           = \
        SELECT id, creator_id, date, descr, icon\
        FROM api_topic
    sql_query_info      = SELECT * FROM `api_topic` WHERE `id` = $id

    # ForeignKey's
    sql_attr_uint       = creator_id


    # DateField's and DateTimeField's
    sql_attr_timestamp   = date




}

index api_topic
{
    source          = api_topic
    path            = /var/data/api_topic
    docinfo         = extern
    morphology      = none
    stopwords       =
    min_word_len    = 2
    charset_type    = utf-8
    min_prefix_len  = 0
    min_infix_len   = 0
}
source api_type
{
    type                = pgsql
    sql_host            = 127.0.0.1
    sql_user            = django
    sql_pass            = welcometoallsortz
    sql_db              = allsortz_db
    sql_port            = 5432

    sql_query_pre       =
    sql_query_post      =
    sql_query           = \
        SELECT id, creator_id, date, descr, icon\
        FROM api_type
    sql_query_info      = SELECT * FROM `api_type` WHERE `id` = $id

    # ForeignKey's
    sql_attr_uint       = creator_id


    # DateField's and DateTimeField's
    sql_attr_timestamp   = date




}

index api_type
{
    source          = api_type
    path            = /var/data/api_type
    docinfo         = extern
    morphology      = none
    stopwords       =
    min_word_len    = 2
    charset_type    = utf-8
    min_prefix_len  = 0
    min_infix_len   = 0
}

searchd
{
	# IP address to bind on
	# optional, default is 0.0.0.0 (ie. listen on all interfaces)
	#
	address				= 127.0.0.1
	# address				= 192.168.0.1


	# searchd TCP port number
	# mandatory, default is 3312
	port				= 3312

	# log file, searchd run info is logged here
	# optional, default is 'searchd.log'
	log					= /etc/sphinxsearch/searchd.log

	# query log file, all search queries are logged here
	# optional, default is empty (do not log queries)
	query_log			= /etc/sphinxsearch/query.log

	# client read timeout, seconds
	# optional, default is 5
	read_timeout		= 5

	# maximum amount of children to fork (concurrent searches to run)
	# optional, default is 0 (unlimited)
	max_children		= 30

	# PID file, searchd process ID file name
	# mandatory
	pid_file			= /etc/sphinxsearch/searchd.pid

	# max amount of matches the daemon ever keeps in RAM, per-index
	# WARNING, THERE'S ALSO PER-QUERY LIMIT, SEE SetLimits() API CALL
	# default is 1000 (just like Google)
	max_matches			= 1000

	# seamless rotate, prevents rotate stalls if precaching huge datasets
	# optional, default is 1
	seamless_rotate		= 1

	# whether to forcibly preopen all indexes on startup
	# optional, default is 0 (do not preopen)
	preopen_indexes		= 0

	# whether to unlink .old index copies on succesful rotation.
	# optional, default is 1 (do unlink)
	unlink_old			= 1
}
